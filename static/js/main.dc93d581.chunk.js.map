{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","cardArray","map","user","i","key","Scroll","props","style","overflow","border","height","children","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","rel","filteredRobots","this","filter","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iPAiBeA,EAfJ,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GAEvB,OAEC,yBAAKC,UAAU,uDACd,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,6BACC,4BAAKL,GACL,2BAAIC,MCeOK,EApBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACVC,EAAUD,EAAOE,KAAI,SAACC,EAAKC,GACjC,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAInB,OACC,6BACEO,ICJWK,EAXF,SAACC,GACb,OACC,yBAAKC,MAAO,CAACC,SAAS,SAASC,OAAO,iBAAiBC,OAAO,UAC5DJ,EAAMK,WCWKC,EAdC,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAE7B,OACC,yBAAKnB,UAAU,OACd,2BAAOoB,KAAK,SACXC,YAAY,mBACZC,SAAUH,MC2CCI,G,kBA7Cd,aAAc,IAAD,8BACZ,+CAcDC,eAAe,SAACC,GACf,EAAKC,SAAS,CAACR,YAAYO,EAAME,OAAOC,SAdxC,EAAKC,MAAM,CACVzB,OAAO,GACPc,YAAa,IAJF,E,iFASO,IAAD,OAClBY,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAG,OAAG,EAAKR,SAAS,CAACtB,OAAO8B,S,+BAS1B,IAAD,OACDC,EAAeC,KAAKP,MAAMzB,OAAOiC,QAAO,SAAAC,GAE7C,OAAOA,EAAMzC,KAAK0C,cAAcC,SAAS,EAAKX,MAAMX,YAAYqB,kBAGjE,OACI,yBAAKvC,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWmB,aAAciB,KAAKZ,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUpB,OAAQ+B,U,GAjCRM,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.dc93d581.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card=({name,email,id})=>{\n\n\treturn (\n\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt='robots'/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\n\nconst CardList=({robots})=>{\n\tconst cardArray=robots.map((user,i)=>{\n\treturn (\n\t\t<Card\n\t\t key={i}\n\t\t id={robots[i].id}\n\t\t name={robots[i].name}\n\t\t email={robots[i].email}\n\t\t />\n\t\t );\t\t\n\t})\n\treturn (\n\t\t<div>\n\t\t\t{cardArray}\n\t\t</div>\n\n\n\t\t);\n}\n\nexport default CardList;","import React from 'react';\n\n\nconst Scroll=(props)=>{\n\treturn (\n\t\t<div style={{overflow:'scroll',border:'5px solid grey',height:'800px'}} >\n\t\t\t{props.children}\n\n\t\t</div>\n\t\t)\n};\n\n\n\nexport default Scroll;","import React from 'react';\n\n\nconst SearchBox=({searchfield,searchChange})=>{\n\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input type='search'\n\t\t\t\tplaceholder='Enter robot Name'\n\t\t\t\tonChange={searchChange}\n\t\t\t\t/>\n\t\t</div>\n\t\t);\n\n\n}\n\nexport default SearchBox;\n","import React,{Component} from 'react';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\n\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nclass App extends Component {\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state={\n\t\t\trobots:[],\n\t\t\tsearchfield: ''\n\t\t}\t\n\t}\n\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response=> response.json())\n\t\t.then(rel=> this.setState({robots:rel}))\n\t\t\n\t}\n\tonSearchChange=(event)=>{\n\t\tthis.setState({searchfield:event.target.value})\n\t\t\n\t\t}\n\t\t\n\t\n\trender(){\n\t\tconst filteredRobots=this.state.robots.filter(robot=>{\n\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n\t\t})\n\n\t\treturn (\n\t\t   \t<div className='tc'>\n\t\t\t   \t<h1 className='f1'>RoboFriends</h1>\n\t\t\t   \t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t   \t<Scroll>\n\t\t\t   \t\t<CardList robots={filteredRobots}/>\n\t\t\t   \t</Scroll>\n\t\t   \t</div>\n\t   \t)\t\n\t}\n\n\n}\n   \t\n\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons'\nimport App from './container/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}